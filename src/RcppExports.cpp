// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// epollImpl
IntegerVector epollImpl();
RcppExport SEXP _epollPromise_epollImpl() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(epollImpl());
    return rcpp_result_gen;
END_RCPP
}
// close_socket
void close_socket(IntegerVector fileno);
RcppExport SEXP _epollPromise_close_socket(SEXP filenoSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type fileno(filenoSEXP);
    close_socket(fileno);
    return R_NilValue;
END_RCPP
}
// socket
IntegerVector socket(CharacterVector addr, CharacterVector port);
RcppExport SEXP _epollPromise_socket(SEXP addrSEXP, SEXP portSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type addr(addrSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type port(portSEXP);
    rcpp_result_gen = Rcpp::wrap(socket(addr, port));
    return rcpp_result_gen;
END_RCPP
}
// readLine
CharacterVector readLine(IntegerVector fileno);
RcppExport SEXP _epollPromise_readLine(SEXP filenoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type fileno(filenoSEXP);
    rcpp_result_gen = Rcpp::wrap(readLine(fileno));
    return rcpp_result_gen;
END_RCPP
}
// writeLine
void writeLine(IntegerVector fileno, CharacterVector str);
RcppExport SEXP _epollPromise_writeLine(SEXP filenoSEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type fileno(filenoSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type str(strSEXP);
    writeLine(fileno, str);
    return R_NilValue;
END_RCPP
}
// epoll_wait
IntegerVector epoll_wait(IntegerVector epollfd);
RcppExport SEXP _epollPromise_epoll_wait(SEXP epollfdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type epollfd(epollfdSEXP);
    rcpp_result_gen = Rcpp::wrap(epoll_wait(epollfd));
    return rcpp_result_gen;
END_RCPP
}
// subscribe
void subscribe(IntegerVector epollfd, IntegerVector fileno, LogicalVector unsubscribe);
RcppExport SEXP _epollPromise_subscribe(SEXP epollfdSEXP, SEXP filenoSEXP, SEXP unsubscribeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type epollfd(epollfdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type fileno(filenoSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type unsubscribe(unsubscribeSEXP);
    subscribe(epollfd, fileno, unsubscribe);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epollPromise_epollImpl", (DL_FUNC) &_epollPromise_epollImpl, 0},
    {"_epollPromise_close_socket", (DL_FUNC) &_epollPromise_close_socket, 1},
    {"_epollPromise_socket", (DL_FUNC) &_epollPromise_socket, 2},
    {"_epollPromise_readLine", (DL_FUNC) &_epollPromise_readLine, 1},
    {"_epollPromise_writeLine", (DL_FUNC) &_epollPromise_writeLine, 2},
    {"_epollPromise_epoll_wait", (DL_FUNC) &_epollPromise_epoll_wait, 1},
    {"_epollPromise_subscribe", (DL_FUNC) &_epollPromise_subscribe, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_epollPromise(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
